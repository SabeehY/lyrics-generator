# -*- coding: utf-8 -*-
"""Copy of RockLyrics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xJXdJQo0JFeTHZHocMSWUx0K6ktin_Yk
"""

# !pip install -q textgenrnn
# Modified the library to allow plotting on tensorboard
!pip install -q git+https://github.com/SabeehY/textgenrnn

# %tensorflow_version 1.x

import pandas as pd
from google.colab import files
from textgenrnn import textgenrnn
import os

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

from google.colab import drive
drive.mount('/content/drive')

tgen = textgenrnn(weights_path='weights/elvis_default_weights.hdf5')
tgen.generate_samples()

file_name = '/content/drive/MyDrive/adv_text_minning/lyrics_artist_sname.csv'

df = pd.read_csv('/content/drive/MyDrive/adv_text_minning/lyrics_artist_sname.csv')
all_lyrics = df['Lyric']
# all_lyrics.to_csv('all_lyrics.csv', index=False)

# top_50 = df['artist'].value_counts()[:50].keys()
# top_50 = df.loc[df['artist'].isin(top_50)]
# top_50['Lyric'].to_csv('top_50.csv', index=False)

#model configuration
model_cfg = {
  'rnn_size': 256,
  'rnn_layers': 2,
  'rnn_bidirectional': True,
  'max_length': 10,
  'max_words': 5000,
  'dim_embeddings': 100, #this is default; dimensionality of word embeddings
  'word_level': True, #we may want to change this after running once
}

train_cfg = {
  'line_delimited': False,
  'num_epochs': 20,
  'gen_epochs': 20,
  'batch_size': 256,
  'train_size': 0.8,
  'dropout': 0.2, #mess with this one; should be low though
  'max_gen_length': 300,
  'validation': True,
  'is_csv': False,
  'tensorboard': False # enable this to get tensorboard output
}

default_cfg = {**model_cfg, **train_cfg}

ep = df[df['artist'] == 'Elvis Presley']['Lyric']
# ep.to_csv('elvis.csv', index=False)

"""Training on Elivs with the default parameters"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir logs/fit

textgen_default = textgenrnn(name="elvis_default")
textgen_default.reset()
textgen_default.train_on_texts(ep.to_list(), **default_cfg)
textgen_default.generate(5, prefix="Wise", temperature=0.5)

textgen_default.generate(5, prefix="Wise", temperature=1)

textgen_dropout_0 = textgenrnn(name="elvis_dropout_0")
textgen_dropout_0.reset()
textgen_dropout_0_cfg = {**default_cfg, **{'dropout': 0}}
textgen_dropout_0.train_on_texts(ep.to_list(), **textgen_dropout_0_cfg)
textgen_dropout_0.generate(5, prefix="Love")

textgen_dropout_4 = textgenrnn(name="elvis_dropout_4")
textgen_dropout_4.reset()
textgen_dropout_4_cfg = {**default_cfg, **{'dropout': 0.4}}
textgen_dropout_4.train_on_texts(ep.to_list(), **textgen_dropout_4_cfg)
textgen_dropout_4.generate(5, prefix="Love")

textgen_rnn_size_128 = textgenrnn(name="elvis_rnn_size_128")
textgen_rnn_size_128.reset()
textgen_rnn_size_128_cfg = {**default_cfg, **{'rnn_size': 128}}
textgen_rnn_size_128.train_on_texts(ep.to_list(), **textgen_rnn_size_128_cfg)
textgen_rnn_size_128.generate(5, prefix="Love")

textgen_rnn_size_64 = textgenrnn(name="elvis_rnn_size_64")
textgen_rnn_size_64.reset()
textgen_rnn_size_64_cfg = {**default_cfg, **{'rnn_size': 64}}
textgen_rnn_size_64.train_on_texts(ep.to_list(), **textgen_rnn_size_64_cfg)
textgen_rnn_size_64.generate(5, prefix="Love")

textgen_rnn_size_64.generate(5, prefix="Love", temperature=0.6)

ep_no_pun = ep.str.replace('[^a-zA-z0-9\s]', '',).str.lower()

textgen_default_no_pun = textgenrnn(name="elvis_default_no_pun")
textgen_default_no_pun.reset()
textgen_default_no_pun.train_on_texts(ep_no_pun.to_list(), **default_cfg)
textgen_default_no_pun.generate(5, prefix="Wise", temperature=0.5)

textgen_char = textgenrnn(name="elvis_char")
textgen_char.reset()
textgen_char_cfg = {**default_cfg, **{'word_level': False}}
textgen_char.train_on_texts(ep.to_list(), **default_cfg)
textgen_char.generate(5, prefix="Wise", temperature=0.5)

